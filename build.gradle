buildscript {
    ext {
        // Typically, only edit those two:
        def objectboxVersionNumber = '2.9.1' // without "-SNAPSHOT", e.g. '2.5.0' or '2.4.0-RC'
        def objectboxVersionRelease = false  // set to true for releasing to ignore versionPostFix to avoid e.g. "-dev" versions

        // version post fix: '-<value>' or '' if not defined; e.g. used by CI to pass in branch name
        def versionPostFixValue = project.findProperty('versionPostFix')
        def versionPostFix = versionPostFixValue ? "-$versionPostFixValue" : ''
        ob_version = objectboxVersionNumber + (objectboxVersionRelease? "" : "$versionPostFix-SNAPSHOT")

        // Native library version for tests
        // Be careful to diverge here; easy to forget and hard to find JNI problems
        def nativeVersion = objectboxVersionNumber + (objectboxVersionRelease? "": "-dev-SNAPSHOT")
        def osName = System.getProperty("os.name").toLowerCase()
        def objectboxPlatform = osName.contains('linux') ? 'linux'
                : osName.contains("windows")? 'windows'
                : osName.contains("mac")? 'macos'
                : 'unsupported'
        ob_native_dep = "io.objectbox:objectbox-$objectboxPlatform:$nativeVersion"

        essentials_version = '3.1.0'
        junit_version = '4.13.1'
        mockito_version = '3.3.3'
        kotlin_version = '1.4.21'
        dokka_version = '1.4.20'

        println "version=$ob_version"
        println "objectboxNativeDependency=$ob_native_dep"
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        // https://github.com/spotbugs/spotbugs-gradle-plugin/releases
        classpath "gradle.plugin.com.github.spotbugs.snom:spotbugs-gradle-plugin:4.5.1"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.22.0"
    }
}

allprojects {
    group = 'io.objectbox'
    version = ob_version

    repositories {
        mavenCentral()
        jcenter()
    }
    
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'  // SNAPSHOTS
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def projectNamesToPublish = [
        'objectbox-java-api',
        'objectbox-java',
        'objectbox-kotlin',
        'objectbox-rxjava',
        'objectbox-rxjava3'
]

def hasSigningProperties() {
    return (project.hasProperty('signingKeyId')
            && project.hasProperty('signingKeyFile')
            && project.hasProperty('signingPassword'))
}

configure(subprojects.findAll { projectNamesToPublish.contains(it.name) }) {
    apply plugin: 'maven-publish'
    apply plugin: 'signing'

    signing {
        if (hasSigningProperties()) {
            String signingKey = new File(signingKeyFile).text
            useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
            sign configurations.archives
        } else {
            println "Signing information missing/incomplete for ${project.name}"
        }
    }

    publishing {
        repositories {
            maven {
                name = 'GitLab'
                if (project.hasProperty('gitlabUrl') && project.hasProperty('gitlabPrivateToken')) {
                    // "https://gitlab.example.com/api/v4/projects/<PROJECT_ID>/packages/maven"
                    url = "$gitlabUrl/api/v4/projects/14/packages/maven"
                    println "GitLab repository set to $url."

                    credentials(HttpHeaderCredentials) {
                        name = "Private-Token"
                        value = gitlabPrivateToken
                    }
                    authentication {
                        header(HttpHeaderAuthentication)
                    }
                } else {
                    println "WARNING: Can not publish to GitLab: gitlabUrl or gitlabPrivateToken not set."
                }
            }
            maven {
                name = 'Sonatype'
                url = version.endsWith('SNAPSHOT') ?
                        "https://oss.sonatype.org/content/repositories/snapshots/" :
                        "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
                if (project.hasProperty('sonatypeUsername') && project.hasProperty('sonatypePassword')) {
                    if (!hasSigningProperties()) {
                        throw new InvalidUserDataException("To upload to repo signing is required.")
                    }

                    credentials {
                        username = sonatypeUsername
                        password = sonatypePassword
                    }
                } else {
                    println "WARNING: Can not publish to Sonatype OSSRH: sonatypeUsername or sonatypePassword not set."
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                // Note: Projects set additional specific properties.
                pom {
                    packaging = 'jar'
                    url = 'https://objectbox.io'
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ObjectBox'
                            name = 'ObjectBox'
                        }
                    }
                    issueManagement {
                        system = 'GitHub Issues'
                        url = 'https://github.com/objectbox/objectbox-java/issues'
                    }
                    organization {
                        name = 'ObjectBox Ltd.'
                        url = 'https://objectbox.io'
                    }
                    scm {
                        connection = 'scm:git@github.com:objectbox/objectbox-java.git'
                        developerConnection = 'scm:git@github.com:objectbox/objectbox-java.git'
                        url = 'https://github.com/objectbox/objectbox-java'
                    }
                }
            }
        }
    }
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

// Plugin to close and promote staging repository to Central.
apply plugin: 'io.codearte.nexus-staging'
nexusStaging {
    if (project.hasProperty("sonatypeUsername") && project.hasProperty("sonatypePassword")) {
        println('nexusStaging credentials supplied.')
        username = sonatypeUsername
        password = sonatypePassword
    } else {
        println('nexusStaging credentials NOT supplied.')
    }
}
